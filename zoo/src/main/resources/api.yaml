openapi: 3.0.0
info:
  title: Animal Management API
  description: API to manage animals, clients, orders, and operations.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local Server

paths:
  /animal_templates:
    post:
      summary: Create an animal template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, species]
              properties:
                name:
                  type: string
                species:
                  type: string
      responses:
        201:
          description: Animal template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'

    get:
      summary: Get all animal templates
      responses:
        200:
          description: List of animal templates returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalTemplate'

  /animal_templates/{id}:
    get:
      summary: Get an animal template by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Animal template details returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalTemplate'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update an animal template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                species:
                  type: string
      responses:
        200:
          description: Animal template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete an animal template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Animal template deleted successfully
        404:
          $ref: '#/components/responses/NotFound'

  /animals:
    post:
      summary: Add a new animal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id_animal_template, sex, origin, price, rent, status, color]
              properties:
                id_animal_template:
                  type: integer
                sex:
                  type: string
                  enum: [male, female]
                origin:
                  type: string
                price:
                  type: number
                rent:
                  type: number
                status:
                  type: string
                  enum: [available, unavailable]
                color:
                  type: string
      responses:
        201:
          description: Animal added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'

    get:
      summary: Get all animals
      responses:
        200:
          description: List of animals returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'

  /animals/{id}:
    get:
      summary: Get an animal by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Animal details returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update an animal status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [available, unavailable]
      responses:
        200:
          description: Animal updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete an animal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Animal deleted successfully
        404:
          $ref: '#/components/responses/NotFound'

  /clients:
    post:
      summary: Add a new client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [client_name, phone_number, email]
              properties:
                client_name:
                  type: string
                phone_number:
                  type: string
                email:
                  type: string
      responses:
        201:
          description: Client added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'

    get:
      summary: Get all clients
      responses:
        200:
          description: List of clients returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'

  /orders:
    post:
      summary: Place an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [order_date, status, quantity, id_client, id_animal]
              properties:
                order_date:
                  type: string
                  format: date
                status:
                  type: string
                  enum: [pending, available, unavailable]
                quantity:
                  type: integer
                id_client:
                  type: integer
                id_animal:
                  type: integer
      responses:
        201:
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'

    get:
      summary: Get all orders
      responses:
        200:
          description: List of orders returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /operations:
    post:
      summary: Add an operation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [price, id_animal, operation_date, operation_type]
              properties:
                price:
                  type: number
                id_animal:
                  type: integer
                operation_date:
                  type: string
                  format: date
                operation_type:
                  type: string
      responses:
        201:
          description: Operation added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'

    get:
      summary: Get all operations
      responses:
        200:
          description: List of operations returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'

components:
  schemas:
    AnimalTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Lion Template
        species:
          type: string
          example: Panthera leo

    Animal:
      type: object
      properties:
        id:
          type: integer
          example: 1
        id_animal_template:
          type: integer
          example: 1
        sex:
          type: string
          enum: [male, female]
          example: male
        origin:
          type: string
          example: Zoo Paris
        price:
          type: number
          example: 10000.00
        rent:
          type: number
          example: 500.00
        status:
          type: string
          enum: [available, unavailable]
          example: available
        color:
          type: string
          example: golden

    Client:
      type: object
      properties:
        id:
          type: integer
          example: 1
        client_name:
          type: string
          example: Jean Dupont
        phone_number:
          type: string
          example: +33612345678
        email:
          type: string
          example: jean.dupont@example.com

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_date:
          type: string
          format: date
          example: 2025-01-01
        status:
          type: string
          enum: [pending, available, unavailable]
          example: pending
        quantity:
          type: integer
          example: 2
        id_client:
          type: integer
          example: 1
        id_animal:
          type: integer
          example: 1

    Operation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        price:
          type: number
          example: 150.00
        id_animal:
          type: integer
          example: 1
        operation_date:
          type: string
          format: date
          example: 2025-01-01
        operation_type:
          type: string
          example: vaccination

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: ERR_001
        message:
          type: string
          example: Invalid request parameters
        details:
          type: array
          items:
            type: string
          nullable: true

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'